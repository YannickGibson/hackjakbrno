import torch
import torch.nn as nn
import transformers
import sys
sys.path.append("../dna2vec")
from dna2vec.model import model_from_config
from evaluate.inference_models import EvalModel
from dna2vec.tokenizer import BPTokenizer
from tokenizers import Encoding, Tokenizer, decoders, models, pre_tokenizers, processors
from tokenizers.trainers import BpeTrainer
from typing import List


checkpoints = {}
checkpoints['trained'] = {}
checkpoints['trained']['model'] = torch.load("../checkpoint.pt")
config = checkpoints['trained']['model']['config']
config.model_config.tokenizer_path = '../dna2vec/src/model/tokenizers/dna_tokenizer_10k.json'
model_kwargs = config.dict()
encoder, pooling, tokenizer = model_from_config(config.model_config)
#encoder.load_state_dict(checkpoints['trained']['model']['model'])
eval = EvalModel(tokenizer,encoder,pooling,"cuda")



def inference_wrapper(gen, eval):
  result = eval.encode(x=gen)
  return result

testik = ["ATGCATACGCGGAAGGCAATAACGGAGGCAATTCGAAAATTAGGAGTCCAAACCGGTGACCTGTTGATGGTGCATGCCTCACTTAAAGCGATTGGTCCGGTCGAAGGAGGAGCGGAGACGGTCGTTGCCGCGTTACGCTCCGCGGTTGGGCCGACTGGCACTGTGATGGGATACGCGTCGTGGGACCGATCACCCTACGAGGAGACTCTGAATGGCGCTCGGTTGGATGACAAAGCCCGCCGTACCTGGCCGCCGTTCGATCCCGCAACGGCCGGGACTTACCGTGGGTTCGGCCTGCTGAATCAATTTCTGGTTCAAGCCCCCGGCGCGCGGCGCAGCGCGCACCCCGATGCATCGATGGTCGCGGTTGGTCCGCTAGCTGAAACGCTGACGGAGCCTCACGAACTCGGTCACGCCTTGGGGGAAGGGTCGCCCGTCGAGCGGTTCGTCCGCCTTGGCGGGAAGGCCCTGCTGTTGGGTGCGCCGCTAAACTCCGTTACCGCATTGCACTACGCCGAGGCGGTTGCGGATATCCCCAACAAACGATGGGTGACGTATGAGATGCCGATGCTTGGAAGAAACGGTGAAGTCGCCTGGAAAACGGCATCAGAATACGATTCAAACGGCATTCTCGATTGCTTTGCTATCGAAGGAAAGCCGGATGCGGTCGAAACTATAGCAAATGCTTACGTGAAGCTCGGTCGCCATCGAGAAGGTGTCGTGGGCTTTGCTCAGTGCTACCTGTTCGACGCGCAGGACATCGTGACGTTCGGCGTCACCTATCTTGAGAAGCACTTCGGAGCCACTCCGATCGTGCCAGCACACGAAGCCGCCCAGCGCTCTTGCGAGCCTTCCGGTTAG","ATGTATCTACTGGTTGGTTTATGCAGCCATGATTGGGTGTTTAACCTTGCATCCTGTTACCGATTTCATGTTTGCACATTATCGTGAAACGCTTTCGCGTTTTTTCAATACGCACTTTCAGCTCAATTCACTTCATTTTAATTTCGTTTAAGTCCGCAGGCGCAGGATATTTTATTCTAACGACCCAGGATTGAGTCGTGGGTCATCTACAGAACAGGATGATGATGAGCGATTTTTTGCCTTTTTCGCGCCCGTCGATGGGCGACGCAGAGCTGGCTGCGCTGCGTGAAGTTTTAGCGTCGGGCTGGATCACCACCGGGCCGAAATTCCGGCACTTGAAGCGGCATTCTGCCAGCTGACCGGCAACCGTCATGCGATTGCCGTCAGTTCAGCGACCGGCGGTGATTTGACCTGATGGCCCTGGGTATTGGCCCCGGCGATGAAGTCATTACGCCGTCCCAGACCTGGGTCTCCACTCTCAATATGATCTGCCTGCTGGGCGCCACGCCGGTGATGATCGATGTCGATAACGACAATCTGATGATTACCCCTGACGCGGTGGAAGCGGCAATCACTTCGCGTACCAAAGCGATAATTCCCGTGCACTACGCGGGCGCGCCAGCCGACATCGACGCCATTCGCGCGGTGGGCGAGCGCCATGGCATTTCGGTGATCGAAGACGCCGCCCATGCGGCCGGTACCCATTATAAAGCCCGCCACGTGGGCTGGCAGGGGACCGCCATTTTCTCGTTCCACGCGATCAAAAACATGACCTGCGCCGAAGGCGGGCTGATTGTCACCGACGACGACGAGCTGGCCTCTCGCATCCGTAGCCTGAAATTCCATGGTCTGGGCGTGGACGCTTATGATCGCCAGACCCACGGCCGCGCGCCACAGGCGGAGGTGATCACCCCGGGCTTCAAGTACAACCTTGCCGATATCAACGCCGCTCTGGCGCTGGTCCAGCTGGAAAAACTGAGCCACGCCAATCAGCGCCGGACAAAGACATGCCCAGCGCTACCTGCGCGAGCTGGCGGACACGCCGTTTAAACCGCTGAGCGTCCCGACCTGGGATCACCAGCACGCCTGGCATCTGTTTATCATCCGCGTCGATGAGGCCGCGTGCGGCATAAGCCGCGACGCGCTGATGGAAAAGCTGAAGGCGATGGGCATCGGCACCGGCCTGCACTTCCGTGCGGCCCATACGCAAAAATATTACCGCGAGCGCTTCCCTGAGGTTTCCCTGCCGAATACCGAATGGAATAGCGCGCATATGCTGCTCTCCGTTGTTCCCGGATATGACCGATGACGATGTCACTCGCGTATATTCCGCACTGCGCCAGTTGTCAGGACGTTGATATGCTTACTTACCCTCCGTGAAGAAGGTCTCGGTGGTTATCCCGGTTTATAACGAACAGGATAGCCTGCCGGAACTGCTGCCGTACGGATGCCGCCTGCGCCACCCTGGGGCGGCAATATGAAATTCTGTTGATCGACGATGGCAGCAGCGACGATTCCGCGCGCGTCTTCACCGAAGCCGCCGAGGCGGAAGGCAGCCACGTCGTCGCCGTGCTGTTAAACCGTCATTACGGCCAGCACTCGGCGATCATGGCCGGCTTCAGCCATGTAACCGCAATGATTATTACCCTCGACGCCGATCTGCAAAACCCGCCGGAGGAGATCCCGCGGCTGGTGGCGAAGGCTGATGAAGGTTACGACGTGGTGGGCACTGTCCCGCCAGAACCGTCAGGACAGCATCTTCCGTAAAACCGCGTCGAAGATGATCAACCGCCTGATCCAGCGCACCACCGGCAAAGCGATGGGCGGCTACTACGGCTGCATGCTGCGCGCTTACCGCCGCCATATCATCAACGCCATGCTCAACTGCCATGAGCGCAGCACCTTTATCCCGATCCTGGCGAATACCTTCGCCCGGCGCGCGGTCGAGATCCCGGTGATGCACGCCGAGCGCGAATTCGGCGACTCCAAATACAGCTTTATGCGCCTGATCAACCTGATGTACGACCTGGTGACCTGTCTGACCACCACGCCGCTGCGTCTGCTCAGCATTTTCGGCAGCGTGATTGCCCTGCTGGGCTTCGCCTTCGGCCTGCTGCTGGTGGTGCTGCGTCTGGCCTTTGGCCCGCAGTGGGCGGCGGAAGGGGTGTTTATGCTCTTCGCCGTGCTGTTCATGTTCATCGGCGCCCAGTTTGTCGGTATGGGCCTGCTCGGGGAGTATATCGGCCGCATCTATAACGACGTGCGCGCCCGCCCCCGCTACTTTATTCAACGTGTTGTTCGCCAGCCGGAAACGGCATCTAAAGAGGAAGATCGTTCATGAAAGCCGTAGTCTTCGCTTATCACGATATGGGCTGCACCGGTATCCAGTCCCTGCTGGACGCCGGGTATGATATCGCTGCTATTTTCACCCACCCGGATAACCCTGGCGAAAACCATTTCTTTGGCTCCGTGGCGCGCCTTGCCGCCGAGCAGGGTATTCCGGTGTGTAGGCTTACGGAAGCGTGAACCATCCGCTGTGGATTGAGCGTATCCGCGATGAAACCGGACGTGCTGTTCTCCTTCTACTATCGCAACCTGCTGGGCGATGAGATCCTCGATCTGGCGCCGAAAGGGGCGTTCAACCTGCACGGTTCGCTGCTGCCAGAATACTCGCGGCCGCGCGCCGCTGAACTGGGTGCTGGTCAATGGCGAAAGCGAAACCGGCGTCACCCTGCACCGGATGGTGAACCGCGCAGACGCTGGCGATATCGTCGCCCAGCAGGCCGTGGCGATTGGCGCGGATGACGCCGCCCTGACGCTGCATCGTAAGCTGTGCGCTGCCGCCACTGAGCTGCTGAGCCGGGCGCTGCCAGCGATCCTCGCCGGCACCACCGATGAGCGTCCGCAGGATCACAGCCAGGCAACCTATGTGGGGCGTCGTACCCGGAAGATGGCCGGCTGGACTGGGAGCTGCCGGCGCAGACCCTGCACAATCTGGTGCGTGCGGTCTCGGATCCGTCGCCGGGCACCTCGGCTACGCCGGAGCGAACAAGTTTATCGTCTGGAAATCCCGCGTTCGCCACGATTTGCCAGCAGCTAAACCGGGCACCGTGCTCTCCATTGCTCCGCTGATCGTCGCGTGCCAGGACGGGGCGCTGGAGATTGTCACCGGCCAGACCGAACGCGGCGTGTACATGCAGGGCGCTCAGCTGGCGCAGGCGCTGGGCCTGGTGTCCGGGGCGGTGATCAGCAGCAAACCGGTGGTGGCGATTAAGCGTCGCACCCGGGTGCTGATCCTCGGCGTCAACGGCTTTATCGGTAACCACCTGACCGAGCGCCTGCTCAGCAGGCGCTCGGTGAGGTCATTCTGCCGATAAAGCCGTTGACGCCGAGGATGCGCGCCCATGCTTAATCGCCACCACCGGTTTGCTGCTCATCACCGCCCCCGGAACAGCCAGGCCCAGCGCCTGCGCCAGCGTCATCACGCCGCGTTCGTCTGGCCCATGAGAATCTCCAGCGCCCCGTATTGGCACGCGAATCGAGCGGCAATGGAGAGCGCGGTCCCCGGTTTACTGCTGGCAATCATAGCGACACAGACTGGGCGTAAACTTGTTCGCTCCCCGGCGTAGCCGAAGGCGGGGCCAGGCCGCGGAATTGAGAACCGCGCGCGCCAGATTGTGCAGGGTCTGCGCCGGCAGCTCCATCCCTGGCCATCTTTGGGGTACGACGCCCCGCCGTGACCGTTCGGCTGTGATCCTCCGGACGCTCATCGGTGGTGCGCGGATCGCTGGCGGCACCCACTGGCCGCTGAGTGGCGGCGTTTCACCGCCGCTTACGATGCAGCGTCAGCAGCGTGGTCGATCGTGGCGACATCGCCACCTGCGCAGTTCCGCGTCGTGCAGGTGAGCGCCGTTTTCGCTTTCGCCATTGACCAGCACCCAGTCTCAGCGGCGCGCGGCCCGCGAATGCCGCAGCAGCGAGACCCGTGAGTTTGAACGCCCTTTTCGCGCCGGATTAATCACCCAGCAGGTTGCGATAGTAAAGGAGCGCGCCGCGTCATGTTTTTCATGCTCGCAACACTTCCGCACGGAATGGTCACGTCTTCCGGCGCGCCCGGAATACCCTGCTCAGCGGCAAGGCGCGCCACGGAGCCGGATTTCGCCAGGGTTATCCGGTGGTGAAAATCACAGCGATATCATACCCGCGTCCGGCAGGAACTGGATACCGGTGCGGCCCCCATATCGTGATAAGCAAAAGCTGCGGCTTTCATGAACGATCTTCTCTTTGATGCATTCCTCGGACGCGTTGAATAAAGTAGCGGGGCGGGCGCGCACGTCGTTATAGATGCGGCCGATATACTCCCCAAGCCAACTGGGCGCCAATCGACACACGCGCGGCGAAAAGCATAAACACCCCTTCCGCCGCCCACTGCGGCCAAAGGCCAGACGCAGCACCACCAGCAGCAGGCCGAGGCGAAGCCGGGCGGGCAATCACGCTGCCAAAATGCTCAGCGGAGCGCGGCGCGTGGTGGTAGGACGGTTCATCACCAGGTCGTATCATCAGGTTGATCAGGCGCACATCGCTTCTATTTGGAGTCGCCGAATTCGCCCTCGGCGTGCATGGCCGGACACTCGACCGCGCGGCAAAGGTATTCGCCAATCGGGATAAAGGTGCTGCGCTTCATGGCAGTTGAGCAGTCGCATTGATGGATGTGGCGGCGGTAAGCACGCAGCATGCAGCCGTAGTCGCCCATCGCCTTTGCCGGTGGTGCGCTGGATCGTCGTCTTCGACGCGGTTTACCGGAAGTACTGTCCACGGTTCTGGCGGACGTGCCCACCCACGTCGTAACCTTCATCAGCCTTCGCCACCAGCCGCGGATCTCCTCCAGCAGCATCGAGGGTAATGATCAAATAGCCGGTTACATGGCTGAAGCCGGCCGTCATCGCCGAGTGCTGGCCGTAGTTACGGTTTAAGCGCGCGGCGACGACGTGGCTGCCTTCCGCTCCGCCGCAGCTTCGGTGAGCATGCGCGGGATCGTCGCTGCTCCCCATGGTGAATAACAGAATTTCATATTCCGCCCGGGTGGCGGGCGCGTCGTTACGACGAACAGCTCCGGCAGGCTATCCTGTTGCCTATAACCAAATAGAGACCTTCTTCAGCGGAGGGTAAGTGGCATTTATGCAACATCCTCAACGACTGGCGCAGTGCGGAGATAACGCGAGTGACATCGTCATCGGTCATATCCAGCGGGAGGGCGGTAGATCAGGCGCTATTCCATTCGGTATTGCGGCAGAAATTCTAGGAAGCGCTCGCGGTAACTTCCGCATGGCCGCGCGGAGGTCGGCCCCGGTGCGGTCCATCACCTTCAGTTTCATCAGCGCGTCGCGGCTTATCCGCACCGCGGCCTCATCGACGCGGATGAACGGATCCAGGCGTGCTGGTAATCCCAAGTAGGGACGCTGGCCGGTTTAAACGGCGTGTCCGCCAGCTCGCACAGTAGCGCTAGGGCAATCTCCGTCCGGCGTAATTTCGGCATCACTGAGTTTTTCCACTGACACGCCGAGCCGCATTGATATGGCAAGGTTGTACTTGAAGCCCGGGTGATCACCTCCGCCTGTGGCGCGCGGCCGTGGGGTCTGGCAATCATAAGCGTCCACGCCCAGACCATGGAATTTCAGGCTACGGATGCGAGAGGCCGCTCGTCGTCGGTGACGATGTCGGCCCCCGCCTTGGGCGCAGGTCATGTTTTTAATCGCGTGGAACAGAGAAAATGGCGGTCCCCTGCCAGCCCACGTGGCGGGCTTTATAATGGGTACCCGCCGCATGGGCGGCGTCTTGAATCACCGAAATGCCATGGCGCTCGCCCACCGCGCGGATGGGGTCTCGAAGTCGGCTGGCGCGCCCGCGTGGTGGCGGAACACTTTGGTACACGAAGTTGATGGCCGCTTCCACCGCGTCAGGGGTAATCGTCGGATTGTCGTTATCGACATGAATCATCACCGGCGTGGCGCCCCACGCGGAGTGTATTCAATGAGGTAGAATCTGTAGGACGGCGTAATGACTTCATCGCCGGGGCCAAATACCCAGGGCCATCGGTCACATGCATCCGCCGGTCGCTGAACTGACGGCAGTGGCATGACGGTTGCCCTGCAGCTGGCAGAATGCCGCTTCAAGTGCCTGATTCTTGGCCCATGAGCCCCGACGCTAAAACTTCACGCAGCGCAGGCGTCTCTGCGTCGCCCATCGACGGGCGCGAAAAAGGCAAAAAATCGCTCATCATGATCCTGTTTCTGTGACCCACACACAGAATCTGGGTCGTTAAAATAAAATATCCTGCGCCTGCGGACTTAAACGAAATTAAACA" ]

res = inference_wrapper(testik, eval)

vek1 = torch.tensor(res[0])
vek2 = torch.tensor(res[1])
cos = torch.nn.CosineSimilarity(dim=0, eps=1e-6)
output = cos(vek1, vek2)
print(output)